algorithms = {'Minimax': 'def get_move(board, mark):\n    # Cache for the first move, otherwise way too slow\n    # for browser.\n    moves = list(empty_squares(board))\n    if len(moves) == 9:\n        return (0, 0)\n\n    best_outcome = -math.inf\n    best_move = None\n\n    for move in moves:\n        outcome = least_bad_outcome(mark, board, mark, move)\n        if outcome > best_outcome:\n            best_outcome = outcome\n            best_move = move\n    \n    return best_move\n', 'Monte carlo': 'def get_move(board, mark, n_rollouts=1):\n    best_move = None\n    best_outcome = -math.inf\n    for move in empty_squares(board):\n        hypothesis = deepcopy(board)\n        row, col = move\n        hypothesis[row][col] = mark\n        outcome = sum(outcome_score(mark,\n            random_rollout(hypothesis, other_mark(mark)))\n            for i in range(n_rollouts))\n        if outcome > best_outcome:\n            best_move = move\n            best_outcome = outcome\n    return best_move\n', 'Random': 'def get_move(board, mark):\n    move = random.choice(list(empty_squares(board)))\n    return move\n', 'Stupid': 'def get_move(board, mark):\n    for row in range(3):\n        for col in range(3):\n            if board[row][col] == EMPTY:\n                move = (row, col)\n                return move\n    return move\n', 'Custom': 'def get_move(board, mark):\n    move = random.choice(list(empty_squares(board)))\n    return move\n'}